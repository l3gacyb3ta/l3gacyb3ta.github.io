; The lexicon is a collection of terms.

INDEX
	HOST : INDEX
	BREF : Main portal.
	BODY
		Welcome to aethopica! This is {arcade my} Memex, the extension of {NEURODIVERGENCE my mind}. 
		Here's my {https://arcades.agency/media/Arcade.pdf Resumé}!

		{^html george}

ABOUT
	HOST : INDEX
	BREF : About anything
	BODY
		This page is about this page, and this site, and the {arcade entity} writing this (Hi!).

ARCADE
	HOST : about
	BREF : About me
	BODY
		{^html hcard}

		{^list human languages}

PORTFOLIO
	HOST : arcade
	BREF : A list of my projects and accomplishments
	TYPE : img_portal
	BODY
		I have made a fair number of projects, and I do a fair number of things!
		For example, here are the languages I speak.

		{^list human languages}

HISTORY
	HOST : arcade
	BREF : Where I come from
	BODY
		My family is from the southeast United States. 
		As far back as I have traced it, my mother's family came from England in the 17th or 18th century, as were farmers.

		## Location history:
		| *Place* | *Date I Arrived* |
		| Born in Pensacola, FL | Dec, 2006 |
		| Moved to Tampa, FL | Jun, 2009 |
		| Moved to Pensacola, FL | Jul, 2010 |
		| Moved to Tampa, FL | Mar, 2011 |
		| Moved to Norfolk, VA | Oct, 2012 |
		| Moved to Bruxells, Belgium | Aug, 2014 |
		> Learned {French}
		| Moved to Stuttgart, Germany | Aug, 2015 |
		> Learned {German}
		| Moved to Roswell, GA | Jul, 2018 |

		## Education history

		| *School* | *Date I Left / Graduated* |
		| Homeschool Pensa->Norfolk | Aug, 2014 |
		| École du Bonheur | Aug, 2015 |
		| Deutsch-Französische Grundschule Stuttgart-Sillenbuch | Aug, 2016 |
		| Wagenburg Gymnasium | Aug, 2018 |
		| Crabapple Middle School | Aug, 2021 |
		| Innovation Academy | < Current > |


META
	HOST : about
	BREF : About this place
	BODY
		Meta is a stupid word now, given its recuperation by the Entity Formerly Known As Facebook™️
		So, what does it mean here?
		In this case,<br>it follows the definition given by the New Oxford American Dictionary:
		"(Of a creative work) referring to itself or to the conventions of its genre; self-referential."
		- New Oxford American Dictionary

		This is a fork of {https://nchrs.xyz/site/meta.html nchrs}, which itself is a fork of {https://wiki.xxiivv.com/site/oscean.html oscean}, back when oscean was still an ANSI C program.
		My fork has some custom features, such as a much more customizible `main.c` and is stripped in a couple places where I didn't need features anymore. It also includes some minor cosmetic changes, currently mostly on links.
		I have also reverted back the codebase back to {C89} compatible, from C99, so that I can build it on some retro devices as a benchmark.

; The index contains an auto-generated part, where it lists all terms.
REFERENCE
	HOST : meta
	BREF : Everything
	BODY
		Unlike {https://libraryofbabel.info/ some other sites}, this does _not_ contain all text possible to write. This is just all/most of the text I have written.

		{^html search}

; Programming, for software!
PROGRAMMING
	HOST : INDEX
	BREF : Wierder math
	BODY
		Hello! This isn't much yet.

DECEMBER ADVENTURE 2023
	HOST : programming
	BREF : It's my birth month :3
	BODY
		# D E C E M B E R  A D V E N T U R E

		{^html calendar}

		## Hopeful goals:
		+ Basic {lisp} implemented on {duskos}
		+ Build an introspective system in that lisp!
		+ Run that system exclusively on my computer for 1 day.

DECEMBER FIRST
	HOST : DECEMBER ADVENTURE 2023
	BREF : Dec 1, 2023
	BODY
		Started work on a {lisp} for {duskos}! We've got a working repl so far.

DECEMBER SECOND
	HOST : DECEMBER ADVENTURE 2023
	BREF : Dec 2, 2023
	BODY
		String parsing is working now! Still missing the first character tho, which is wierd. I'm going to debug some more.
		Enjoy some {c89 C} (the current repl evironment):
		{^code decemberAdventure/lispDec2.c}

DECEMBER THIRD
	HOST : December adventure 2023
	BREF : Dec 3, 2023
	BODY
		Today I didn't do much, but I did get to take a practice {https://www.act.org ACT} test, which for my non-american-teenager friends is just a fancy standardized test, which despite my {ADHD} I actually enjoy quite a lot.
		I also set up a new desk! It's fancy and motorized, so I can stand at it and not hurt my body any more than necessary.
		{^img stuff/desk.jpg}

DECEMBER FOURTH
	HOST : December Adventure 2023
	BREF : Dec 4, 2023
	BODY
		I accidentally wrote a bunch about {forth} today, the 4th of Decemeber! It's a small little introduction to the language, hopefully understable.

DECEMBER SIXTH
	HOST : December Adventure 2023
	BREF : Dec 6, 2023
	BODY
		IT'S MY BIRTHDAY!!! Hell yeah, got some cool stuff, including:
		+ A new desk
		{^img stuff/desk.jpg}
		+ Guitar picks
		+ A book for self-teaching guitar
		+ {https://www.theymightbegiants.com/flood Flood} on vinyl!
		+ Fallout New Vegas

		I also added my new motto to the site! It's up and to the right :>

ICBINF
	HOST : PORTFOLIO
	BREF : I CAN'T BELIEVE ITS NOT FORTH
	BODY
		I CAN'T BELIEVE ITS NOT {FORTH}! is a forth-like stack-based language, with a web UI and a goal of being used to make little widgets everywhere.
		{^html icbinf}
	LINKS
		Source : https://git.sr.ht/~arcade/ICBINF

FUCC
	HOST : PORTFOLIO
	BREF : An optimizing Brainfuck Compiler
	BODY
		This is an optimizing {brainfuck} compiler, writen in {ocaml}.
		I use basic compiler techniques, like loop unwrapping and some simple peep-hole optimizations, as well as offloading the work to a C compiler ;)
	LINKS
		Source : https://git.sr.ht/~arcade/fucc

SUPER16
	HOST : programming
	BREF : A small, broken, ISA
	BODY
		I am pretty sure that this isn't turing complete.
		It also has no way to access memory!
		It has an emulator and very basic assembler, written in {python}.

		One instruction is composed of 32 bits, making up 3 catagories; Opcode, Register and data. The opcode is two hexadecimal digits, the register is another two, and the data is a 4-digit hexadecimal number split into two two-digit numbers. Here is an example instruction loading ```0xf988``` into ```r5```:  
		| *Opcode* | *Register* | *Data 1* | *Data 2* |
		| `0x20`   | `0x05`     | `0xf9`   | `0x88`   |

		The full list of opcodes, as well as an example, the instruction & explaination are as follows:  
		| *Opcode* | *Instruction* |                                                                             |
		| `0x10`   | store       | store reg reg2                                                              |
		|        |             | Copy value from one reg to another                                          |
		| `0x20`   | load        | load reg val                                                                |
		|        |             | Load a value into a reg                                                     |
		| `0x30`   | add         | add reg val                                                                 |
		|        |             | Add value to reg                                                            |
		| `0x31`   | addr        | addr reg reg2                                                               |
		|        |             | Adds reg2 to reg                                                            |
		| `0x40`   | sub         | sub reg val                                                                 |
		|        |             | Subtracts val from reg                                                      |
		| `0x41`   | subr        | subr reg reg2                                                               |
		|        |             | Subtracts reg2 from reg                                                     |
		| `0x50`   | mul         | mul reg val                                                                 |
		|        |             | Multipy register by value                                                   |
		| `0x51`   | mulr        | mul reg reg2                                                                |
		|        |             | Multiply reg by reg 2                                                       |
		| `0x60`   | div         | div reg val                                                                 |
		|        |             | Intiger divides the register by the value                                   |
		| `0x61`   | divr        | div reg reg2                                                                |
		|        |             | Initger devides reg by rg2                                                  |
		| `0xff`   | prt         | prt 0x0000 0x0000                                                           |
		|        |             | Print ascii value in p0 reg                                                 |
		| `0x0f`   | scrn        | scrn 0x0000 val                                                             |
		|        |             | Set pixel in x8 and y9 regs to the value (0: black) (1: white)              |
		| `0xdd`   | drw         | drw 0x0000 0x0000                                                           |
		|        |             | Draw screen buffer                                                          |
		| `0xf0`   | cmp         | cmp reg reg2                                                                |
		|        |             | Set cm reg to 0x0001 if bigger, 0x0000 if smaller, and 0xffff if they're equal |
		| `0xb0`   | branch      | branch val label                                                            |
		|        |             | Branch to loop if cm is val                                                 |
		| `0xb1`   | nbranch     | nbranch val label                                                           |
		|        |             | Branch to loop if cm is not val                                             |
		| `0xbb`   | jump        | jump 0x0000 label                                                           |
		|        |             | Jump to label                                                               |
		| `0x00`   | noop        | noop 0x000 0x000                                                            |
		|        |             | Literally does nothing                                                      |
		| `0xfe`   | halt        | halt 0x0000 0x0000                                                          |
		|        |             | Halts the cpu                                                               |

		I plan on making a much better version of this soon.
	LINKS
		Source : https://github.com/l3gacyb3ta/super16

CORGI
	HOST : programming
	BREF : A CLI for doggo.ninja
	BODY
		This is a CLI for my friend {https://kognise.dev/ Kognise's} service {https://doggo.ninja}.
		It is written in {Python}.

PLT
	HOST : programming
	BREF : Beep boop language
	BODY
		I really love computing languages! There's just so much diversity.

C89
	HOST : PLT
	BREF : The ANSI C Programming Language
	BODY
		C is a programming language first implemented in 1972, is a general purpose programming language with wide hardware support, and many different compilers:
		{^list c compilers}

		C is also at the core of the Linux opperating system, as is it at the core of most developer tools. 
		C is a language that rides the line of complexity and simplicity well.

		### Hello World in C
		{^code helloworld.c}

	LINKS
		Wikipedia : https://en.wikipedia.org/wiki/C_(programming_language)

PYTHON
	HOST : PLT
	BREF : Sssss snake language
	BODY
		Python is a modern-ish semi-compiled scripting language. I like to use python to protype larger projects, but it is not something I try to use as a main part of a project.
		Python also happens to have its main implementation written in {c89 C}.

		### Hello World in Python
		> print("Hello World")

OCAML
	HOST : stump
	BREF : functional
	BODY
		{stump}

FORTH
	HOST : PLT
	BREF : stack-based squishies
	BODY
		Forth is a stack based programming language from the 70s, but that still holds up 50 years later!

		If you want to play along at home, install a forth of your choice! The GNU project has {https://www.gnu.org/software/gforth/ gforth}, one of the few FOSS ANSI Forth implementations.
		Or, better yet, use {http://www.call-with-current-continuation.org/uf/uf.html UF}, which is a forth implementation for {UXN}!

		Stacks are the core concept in Forth, and similar languages. They're also known as LIFO (Last-In, First-Out) structures, because that's how they work! 

		## Intro to the stack and basic Forth :>

		You interact with the stack by pushing data onto it! This is the easiest operation in forth, you just write your data.

		`1 2 3` pushes 1, 2, and 3 onto the stack!

		Now, `.` pops the top item off of the stack, and prints it out for you.
		What do you think `. . .` would print now?

		`1 2 3 . . .` returns `3 2 1 ok`! It's backwards because that's how stacks work, Last In, First Out! The `ok` is the forth implementation telling you that it's ready for more input.

		If we want to do anything with the stack, we use words! Words are what forth calls any operations. Words also have "arrity", which is their effect on the stack.

		For example, `+` could be notated as `( a b - c )`. This tells us that it takes in 2 things on the stack, and returns one. 

		All math in forth is in {https://en.wikipedia.org/wiki/Reverse_Polish_notation Reverse Polish Notation}, where you put operators after their operands. For example, 1 + 1 is 1 1 +. Because of this, you don't need parentheses, because all order of operations is defined by reading left to right.

		Heres a more complex example of how to rewrite math in RPN: (1 + 5) / ((2 * 9) - 3) becomes 1 5 + 2 9 * 3 - /. While this might seem more complex at first, it's equivalent to the first equation, without a need for parentheses.

		## Building your own words

		For now, we've only used things built into forth. Forth can let you define your own words tho! And it's super easy too!

		Forth has a "compile mode" which you can enter by using the word `:` and exit by using `;`. After `:` you have to give your new word a name, but after that, you just write forth!

		Here's a word that squares a number: `: square ( n - n^2 ) dup * ;`

		This is a pretty simple definition.

		+ It starts by entering compile mode (`:`) and then gives the word a name (`square`).
		+ It then has an arrity comment. These don't do anything in the actual compiler, but they're very useful for us forth operators.
		+ We then use `dup` which duplicates the top of the stack. Multiplying the number by itself, it squares it!
		+ Done with our word, we exit compile mode with `;`

		Chuck Moore is a personal hero `<3`
	LINKS
		UF (Uxn Forth) : http://www.call-with-current-continuation.org/uf/uf.html
		GForth (GNU Forth) : https://www.gnu.org/software/gforth/
		RPN : https://wiki.c2.com/?PostfixNotation

DUSKOS
	HOST : forth
	BREF : cool forth based OS
	BODY
		{stump}
	LINKS
		Website : http://duskos.org/

UXN
	HOST : stump
	BREF : super cool little VM
	BODY
		Love ya, Devine `<3`
		{stump}

LISP
	HOST : stump
	BREF : an elegant weapon for a more civalized age
	BODY
		{stump}

RACKET
	HOST : stump
	BREF : fancy scheme
	BODY
		{stump}

ESOLANGS
	HOST : PLT
	BREF : programming language designed to experiment with wierd ideas, be a joke, or suck to write in
	BODY
		Esolangs are programming languages designed to experiment with wierd ideas, be a joke, or suck to write in. There are many interesting ones! 
		Here are some I have written about, and some resource to explore:
	LINKS
		Esolang Wiki : https://esolangs.org/wiki/Main_Page

BRAINFUCK
	HOST : esolangs
	BREF : funny simple ESOLANG
	BODY
		Brainfuck is a super simple {esolangs esolang}, designed in the 80s to have the smallest possible compiler.
		It is based around an array of 30k byte-sized cells, and a pointer into that array (basically the index that the "brainfuck machine" is currently at). It can be helpful to think about the language as a little machine that runs on a track around 30k little whiteboards, where you can change the instructions the machine follows.
		In brainfuck, code and data are stored seperatly, i.e. a Harvard Architecture vs. a Von Neumann Architecture. 

		There are 8 main operations, and a common ASCII representation of that code.
		| Instruction | Code | What it does! |
		| Increment Memory Pointer | `>` | Basically, moves the "brainfuck machine" to the right along the track of the memory array. |
		| Decrement Memory Pointer | `<` | Same as incrementing, but moving to the left. |
		| Incease value at pointer | `+` | Increases the value at the place the machine is. |
		| Decrease value at pointer | `-` | Decreases the value at the place the machine is. |
		| Start loop | `[` | This tells the brainfuck machine to start a loop. It doesn't do anything to the current memory cell, or the position the "machine" is, but it will when you close the loop |
		| End/Check loop | `]` | When the brainfuck machine hits this, it will check if the current value (number on the whiteboard), and if it's not zero, start the instructions back at where you started the loop |
		| Read character in | `,` | The machine will write the ascii value of an inputted character on the current cell. | 
		| Output character | `.` | Write the current cell out as the ascii character represented by the number. |






; ----------- PROJECTS ---------

Languages I know
	HOST : PORTFOLIO
	BREF : Software, squishy, squishy ware.
	BODY
		I write software primarily in {Rust}, {C89 C}, Golang, {Python}, and Javascript.
		Writing software is something I love, because of how accessible it is. All you need is a keyboard, a screen, and a computing device; from a chromebook to a top of the line gaming PC. The vast majority of good programmming software is free and open source, which makes a great ecosystem for begineers.


; --------- Writing -----------

; WRITING
; 	HOST : projects
; 	BREF : Words on a screen
; 	BODY
; 		Wow! I have written words!

GOBLINS
	HOST : PORTFOLIO
	BREF : Spritely's Goblins and How They're Gonna Steal The World
	BODY
		{^html goblins}
		The code in this article was using {racket}
	LINKS
		Spritely Institute : https://spritely.institute/
		Christine : https://dustycloud.org/

ZOMBIE 
	HOST : PORTFOLIO
	BREF : Zombie Authors Essay
	BODY
		So, for this whole thing to work, I'm gonna have to introduce you to Mr. Barthes.
		Roland Barthes was 20th century french literary theorist, someone who talks about how books *work*.
		One of his most major contributions to his field was that of "The Death of The Author"
		(French: "La mort de l'auteur"). This concept proposes that once a work has been written, the
		author can be considered "dead" for the purpose of critique and examination, because the text remains
		the same, no matter what the author does next. 

		### Dude if you think about it, we're all authors. wooooah.
		Another point of his is that every time a text is read, the reader "rewrites" it in their own head
		with the current cultural context. For example, a french peasant in the 18th century would have read
		a text about the king way differently than, for example, the king himself (not that he would be reading with those eyes much longer).
		Now some (meeee) would argue that this includes what the author of the text has done since the original writing (* cough J.K. Rowling cough *),
		but for the purpose of this post, we're going to stick with Rolly's original idea.

		## Why is code not a book? They both suck to write.

		Now, most (normal) people apply this concept to the arts, but I'm not most people. (yes I am seeing a therapist)

		&lt;tangent&gt;  
		### Wait what even is art
		When people think of "the arts", they usually think of things like film, music, literature, theater, that are generally considered entertainment. 
		But art can be so much more! For example, architecture is a form of art, and that, while it can be entertaining to the right kind of person, is mostly useful.
		Another form of art is tool making! Like, if I put time and effort into making a nice looking and functional hammer, that's a piece of art, for ~~whacking people~~ hitting nails.  
		&lt;/tangent&gt;  

		Now because of this, code falls into an interesting place. Usually it isn't static, like a hammer or a painting or a book are. It is dynamic, it runs, it updates, it gets pushed and pulled and forked and merged, so can we even consider the author "dead"?

		## And who wrote that code 
		Introducing: Zombie programmers! They're here finally.  

		In the case of code and it's authors "mortality", it can be effectively summarized as undead. This means that when looking at code, we have to consider the author far more than we would
		with, say a movie. A piece of code is ever-changing, like us, the undead authors. This puts our community in an interesting place, in that they have to deal with using software with undead misogynists.

		### Undead misogynists TW: sexual assault, child abuse, general terribleness

		Soooooo why did I write this. I had recently been made aware of the _many_ accusations of terrible and unforgivable things levied against an important member of the open source and free software world, Richard M. Stallman.
		Mr. Stallman has publicly defended child abuse, and has made unwanted sexual advances on women over whom he had a position of power.
		I, as a male-passing person, do not have any sort of context for this sort of abuse, and am urging you all to {https://selamjie.medium.com/remove-richard-stallman-fec6ec210794 read} {https://thenewstack.io/why-almost-everyone-wants-richard-stallman-cancelled/ more} from people 100x more qualified to talk about than I am.

		The reason I bring RMS up is that he has been a core member of the FSF and the GNU project for many decades, and because of the undead nature of code, we can't just dismiss his involvement as inconsequential.
		I am currently writing this on a laptop running GNU/Linux with code licensed under the GPL, and I feel as though us, the free and open software community _must_ talk more about the people who write our software.

		## Dang, that got heavy.

		In the end, this is less of a discussion of code analysis and literary theory and more a call to action for accountability in the open source community. Please go out and make an amazing place just that much better by getting rid of these stupid people who hold us back.
		I have also attached some basic resources for further reading on this. Thanks for sticking around y'all!
	LINKS
		Fight Racism in Open Source : https://cucumber.io/blog/open-source/tackling-structural-racism-(and-sexism)-in-open-so
		Fight Sexism in Open Source : https://www.computerweekly.com/blog/Open-Source-Insider/How-to-keep-sexism-out-of-open-source



; ----------- LANGUAGES ---------

LANGUAGES
	HOST : INDEX
	BREF : Systems of communication.
	BODY
		Languages are amazing, they are so versitile in their uses and yet so diverse in their implementation, human and machine alike.
		I personally prefer machine languages, because they follow much stricter rules (grammar and syntax), but human ones are also a {NEURODIVERGENCE special interest}.

FRENCH
	HOST : Languages
	BREF : Oh-hon-hon🇫🇷
	BODY
		French is a language I learned while {history living in belgium}.
		French is a heavily gendered language (eww), with an interesting adjective order that I'm sure exists in other languages, but havent seen for myself.
		In most cases, in french, the adjective comes after the nice.
		> English: The green cat
		> French: Le chat vert (The cat green)

GERMAN
	HOST : Languages
	BREF : Aber ja, Gunter.
	BODY
		German is my favorite natural language, despite its lack of gender neutral pronouns.
		I learned German while in {history Stuttgart}.
		I continue my German education at the {https://www.germanschoolatlanta.com/ German School of Atlanta}

		{^list german certifications}

CONLANGS
	HOST : Languages
	BREF : Making stuff!
	BODY
		Conlangs are artificial human-constructed languages. I emphasize the "artificial" part, because _technically_ all languages are human-constructed. 
		Some of my favorites are Toki Pona, a minimal language that only has around 120 words, designed to create positive thinking, and Ithkuil, a far more complex language designed to express complex philiosophical concepts.
	LINKS
		Ithkuil : https://www.ithkuil.net/
		Toki Pona : https://tokipona.org/

ENGLISH
	HOST : Languages
	BREF : Supprisingly good
	BODY
		English is actually quite nice! Per-letter, English is actually one of, if not the, most efficient languages! Obviously this is flawed, as you can only really compare to other languages that use a latin-derived alphabet. And if you measure by speaking time, almost all languages are the same information rate! Some just speak faster than English.

		# Spelling Reform
		Spelling reforms are something that have been attempted many times over, and some have stuck!
		For example, one of the most successful ones in English was Noah Webster's, of Webster's Dictionary fame. He is why American English spells `labor` without the `u`, and `center` not `centre`.

		My personal spelling reform and method is simple. I just use it! And you can too.
		Current substitions I make: 
		{^list spelling reforms}

; ###############----------- STUMPS ---------------################

STUMP
	HOST : INDEX
	BREF : [WIP]
	BODY
		STUMP is the host for some lexicon entries that I have not yet completed, so if you found this, congrats!

NEURODIVERGENCE
	HOST : arcade
	BREF : How our brains can be different
	BODY
		I have {ADHD}, {depression}, and probably some form of {autism}.

ADHD
	HOST : NEURODIVERGENCE
	BREF : Attention Deficit Hyperactivity Disorder, aka. my superpower and curse.
	BODY
		ADHD is something I have struggled with since I was a small child, at least if my parents are to trust (which I think they are).
		ADHD has 2 types defined in the DSM (Diganostic and Statistic Manual, basically *the* book on mental illness):
		+ Inattentive
		> This is the one I have the most experience with, as I have it. It is characterized by a lack of attention to detail that doesnt seem like it matters, as well as horrible short term memory for tasks.
		+ Hyperactive-Impulsive
		> Charcterized by the typical fidgeting and impulsiveness that can seem childish at first, but is infact a very important symptom of ADHD.
		+ Combined Presentation
		> This has both Hyperactive-Impulsive symptoms and Inattentive ones! I have a couple of friends who are Combined Presentation, and they describe it as a horrible mix of not paying attention and wanting to be a part of the conversation.
		ADHD is also comorbid with {autism ASD} in a lot of cases.

AUTISM
	HOST : NEURODIVERGENCE
	BREF : Autism Spectrum Disorder
	BODY
		I have not been dignosed with any ASD, but based on some preliminary self-analysis, I probably have some form. It also is comorbid with {ADHD}, which I do have a clinical diagnosis for.

DEPRESSION
	HOST : NEURODIVERGENCE
	BREF : The Big Sad
	BODY
		Depression is characterized by my depressive episodes. During these times I shut down and start losing motivation, start closing social connections.

MARBLES
	HOST : arcade
	BREF : My life, and how much of it is left!
	BODY
		Life is overvalued in my opinion, what one does with it, on the other hand, is undervalued. That's why I am a big proponent of (responisble) {hedonism}.
		This is a {stump}
		{^marbles }


; ----- PHILIOSOPHY ------

PHILIOSOPHY
	HOST : stump
	BREF : My personal philiosophy
	TYPE : img_portal
	BODY
		I have a few core beliefs:
		+ {Anarchism}
		+ {Empiricism}
		+ {Degrowth}
		+ {Hedonism}

ANARCHISM
	HOST : philiosophy
	BREF : TODO
	BODY
		This is a {stump}.

EMPIRICISM
	HOST : philiosophy
	BREF : TODO
	BODY
		This is a {stump}.

HEDONISM
	HOST : philiosophy
	BREF : TODO
	BODY
		This is a {stump}.

DEGROWTH
	HOST : philiosophy
	BREF : Line go down?
	BODY
		"Degrowth ({French}: décroissance) is a term used for both a political, economic, and social movement as well as a set of theories that critiques the paradigm of economic growth.

; -------- INVENTORY ----------

; --------- MISC ----------------

INVENTORY
	HOST : stump
	BREF : Press [E] to open.
	BODY
		Stuff I own

CARYOPHYLLUS
	HOST : inventory
	BREF : A top of lap
	BODY
		As much as I hate {anarchism apple}, they do make a damn fine laptop.
		I primarily use asahi linux, but heavily modified macos is also good. I am a big fan of stickers, so the back is is covered in them.
		(Remind {arcade me} to upload a picture) 

NOW
	HOST : arcade
	BREF : What I'm doing!
	BODY
		Subscribe {https://journal.miso.town/atom?url=https://arcades.agency/now.html here}!
		{^html now}
	LINKS
		Have your own html journal! : https://journal.miso.town/